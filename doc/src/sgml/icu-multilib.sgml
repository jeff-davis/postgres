<!-- doc/src/sgml/icu-multilib.sgml -->

<sect1 id="icu-multilib" xreflabel="icu_multilib">
 <title>icu_multilib</title>

 <indexterm zone="icu-multilib">
  <primary>icu_multilib</primary>
 </indexterm>

 <para>
  The <filename>icu_multilib</filename> module provides control over the
  version (or versions) of the ICU provider library used by
  <productname>PostgreSQL</productname>, which can be different from the
  version of ICU with which it was built.
 </para>

 <para>
  Collations are a product of natural language, and natural language evolves
  over time; but <productname>PostgreSQL</productname> depends on stable
  ordering for structures such as indexes. Newer versions of ICU update the
  provided collators to adapt to changes in natural language, so it's
  important to control when and how those new versions of ICU are used to
  prevent problems such as index corruption.
 </para>

 <para>
  This module assumes that the necessary versions of ICU are already
  available, such as through the operating system's package manager; and
  already properly installed in a single location accessible to
  <productname>PostgreSQL</productname>. The configration variable
  <literal>icu_multilib.library_path</literal> should be set to the location
  where these ICU library versions are installed.
 </para>

 <para>
  <filename>icu_multilib</filename> must be loaded via
  <literal>shared_preload_libraries</literal>.
  <filename>icu_multilib</filename> ignores any ICU library with a major
  version greater than that with which <productname>PostgreSQL</productname>
  was built.
 </para>

 <sect2 id="icu-multilib-version-stability">
  <title>ICU Version Stability</title>

  <para>
   The simplest way to use <filename>icu_multilib</filename> is to force ICU
   version stability. Version stability means that
   <productname>PostgreSQL</productname> will use the same version of ICU for
   all collations, even if the operating system or
   <productname>PostgreSQL</productname> itself is upgraded or moved. The
   stable version may or may not be the same as that with which
   <productname>PostgreSQL</productname> was built.
  </para>

  <para>
   Version stability may be based on both the major and minor version of ICU,
   such as <literal>68.2</literal>; or on the major version alone, such as
   <literal>68</literal>. Specifying both the major and minor versions more
   closely controls exactly which ICU library is loaded, but applying minor
   version upgrades of the ICU library may interfere with normal
   operation. Specifying the major version alone makes applying ICU minor
   version updates simpler, but carries a risk of subtle differences in
   collation order if the library is updated.
  </para>

  <para>
   To configure for version stability, first make sure that
   <varname>icu_multilib.library_path</varname> is set correctly, which you
   can observe by executing the
   <literal>icu_multilib.library_versions()</literal> function. Then set
   <varname>icu_multilib.default_icu_version</varname> to the stable version,
   and set <varname>icu_multilib.search_by_collator_version</varname> to
   <literal>false</literal>. These configuration variables should be set in
   <filename>postgresql.conf</filename> to ensure that the stable version of
   ICU is used consistently.
  </para>

  <note>
   <para>
    Ensure that the stable version of the ICU library is always available,
    including on all replicas and through operating system and
    <productname>PostgreSQL</productname> upgrades.
   </para>
   <para>
    Similarly, keep the settings in <filename>postgresql.conf</filename>, and
    keep them consistent across replicas and upgrades.
   </para>
  </note>

  <para>
   For best results, stabilize the ICU version immediately after
   <command>initdb</command> is run, to ensure that initial collations are
   loaded from the stabilized version of the ICU library. To do this, use the
   option <xref linkend="app-initdb-option-no-import-collations"/> for
   <command>initdb</command>, import the collations manually, and then refresh
   the versions for the default collations. For instance:
  </para>

<programlisting>
$ initdb --no-import-collations -D data --locale-provider=icu --icu-locale="en_US" --locale="en_US.UTF-8"
$ cat - >> data/postgresql.conf
shared_preload_libraries = 'icu_multilib'
icu_multilib.library_path = '/path/to/icu/lib'
icu_multilib.default_icu_version = '65.1'
icu_multilib.search_by_collator_version = false
icu_multilib.include_builtin = false
^D
$ pg_ctl -D data -l logfile start
$ psql template1
WARNING:  icu_multilib: collator version mismatch detected for locale "en_US"
DETAIL:  ICU 65.1 provides collator version "153.97" for locale "en_US"; expected version "153.112".
WARNING:  icu_multilib: collator version mismatch detected for locale "en_US"
DETAIL:  ICU 65.1 provides collator version "153.97" for locale "en_US"; expected version "153.112".
WARNING:  database "template1" has a collation version mismatch
DETAIL:  The database was created using collation version 153.112, but the operating system provides version 153.97.
HINT:  Rebuild all objects in this database that use the default collation and run ALTER DATABASE template1 REFRESH COLLATION VERSION, or build PostgreSQL with the right library version.
=# ALTER DATABASE template1 REFRESH COLLATION VERSION;
NOTICE:  changing version from 153.112 to 153.97
ALTER DATABASE
=# SELECT pg_import_system_collations('pg_catalog');
 pg_import_system_collations
-----------------------------
                         792
(1 row)

=# \q
$ psql postgres
WARNING:  icu_multilib: collator version mismatch detected for locale "en_US"
DETAIL:  ICU 65.1 provides collator version "153.97" for locale "en_US"; expected version "153.112".
WARNING:  icu_multilib: collator version mismatch detected for locale "en_US"
DETAIL:  ICU 65.1 provides collator version "153.97" for locale "en_US"; expected version "153.112".
WARNING:  database "postgres" has a collation version mismatch
DETAIL:  The database was created using collation version 153.112, but the operating system provides version 153.97.
HINT:  Rebuild all objects in this database that use the default collation and run ALTER DATABASE postgres REFRESH COLLATION VERSION, or build PostgreSQL with the right library version.
=# ALTER DATABASE postgres REFRESH COLLATION VERSION;
NOTICE:  changing version from 153.112 to 153.97
ALTER DATABASE
=# SELECT pg_import_system_collations('pg_catalog');
 pg_import_system_collations
-----------------------------
                         792
(1 row)

=# \q
$
</programlisting>

  <para>
   The result will be a system based on ICU version <literal>65.1</literal>, and
   <productname>PostgreSQL</productname> will use that version of ICU for all
   collations that use the ICU provider.
  </para>
 </sect2>

 <sect2 id="icu-multi-version">
  <title>Multiple ICU Version Support</title>
  <para>
   Support for multiple ICU library versions in the same database allows the
   system to adapt to changes in natural language over time. As these changes
   are introduced in new versions of ICU, those new versions can be brought
   into <productname>PostgreSQL</productname> incrementally without
   interfering with existing data (or structures like indexes).
  </para>
  <sect3>
   <title>Search by Collator Version</title>

   <para>
    Collators provided by ICU also have a version which is distinct from the
    version of ICU. For instance, in ICU version <literal>70.1</literal>, the
    collator for the <literal>en_US</literal> locale has version
    <literal>153.112</literal>. A collator for a given locale may or may not
    be assigned a new version when the ICU library version is updated.
   </para>

   <para>
    When a collation is created, <productname>PostgreSQL</productname> obtains
    the version of the collator from the ICU library and records it in the
    catalog. This recorded version can be updated using <literal>ALTER
    COLLATION ... REFRESH VERSION</literal>; or <literal>ALTER DATABASE
    ... REFRESH COLLATION VERSION</literal> if it's the database's default
    collation. These <literal>ALTER</literal> commands obtain the new collator
    version from the ICU library identified by
    <varname>icu_multilib.default_icu_version</varname> if set; otherwise they
    obtain the new collator version from the built-in ICU library.
   </para>

   <para>
    Set <varname>icu_multilib.search_by_collator_version</varname> to
    <literal>true</literal> to enable <filename>icu_multilib</filename> to
    search (in descending order of ICU major version) among the
    available libraries to find the first one that provides a collator with a
    version that matches the one recorded in the catalog.
   </para>

   <para>
    For example, ICU versions <literal>62.2</literal> and
    <literal>63.2</literal> both provide collator version
    <literal>153.88</literal> for the locale <literal>en_US</literal>; while
    ICU version <literal>64.2</literal> provides collator version
    <literal>153.97</literal> for the same locale. Searching for an ICU
    library for a collation with a recorded version of
    <literal>153.88</literal> will find the ICU library with version
    <literal>63.2</literal>, because that's the ICU library with the highest
    major version (<literal>63</literal>) that provides collator version
    <literal>153.88</literal>. The function
    <function>icu_multilib.collator_version_search</function> simulates this
    search for the given locale and version:
   </para>
<programlisting>
SELECT * FROM icu_multilib.collator_version_search('en_US', '153.88');
 icu_version | uca_version | collator_version
-------------+-------------+------------------
 63.2        | 11.0        | 153.88
(1 row)

</programlisting>

   <note>
    <para>
     Searching by collator version relies on the assumption that collators
     with the same version behave identically regardless of which ICU library
     provides it. The administrator must weigh the risks of this assumption
     against the convenience when managing multiple major versions of ICU.
    </para>
   </note>
  </sect3>
 </sect2>

 <sect2 id="icu-multilib-configuration-parameters">
  <title>Configuration Parameters</title>

  <variablelist>
   <varlistentry>
    <term>
     <varname>icu_multilib.library_path</varname> (<type>string</type>)
     <indexterm>
      <primary><varname>icu_multilib.library_path</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      The filesystem path in which to search for ICU libraries. Must be set
      for <filename>icu_multilib</filename> to be useful. Multiple major
      versions of ICU may be present; but for each major version, only a
      single minor version can be present.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>icu_multilib.version_mismatch_log_level</varname> (<type>string</type>)
     <indexterm>
      <primary><varname>icu_multilib.version_mismatch_log_level</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      A version mismatch happens when the version of a collator provided by
      the ICU library is different than then collator version recorded when
      the collation was created (or last refreshed).
     </para>
     <para>
      When a version mismatch is detected, a log message is emitted at this
      level. <literal>WARNING</literal> is the default. If the level is set to
      <literal>ERROR</literal>, it may interfere with normal operation.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>icu_multilib.library_search_log_level</varname> (<type>string</type>)
     <indexterm>
      <primary><varname>icu_multilib.library_search_log_level</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      <filename>icu_multilib</filename> emits messages at this level while
      determining which ICU library to choose. The default is
      <literal>DEBUG1</literal>. This setting is useful to diagnose problems
      when a suitable ICU library is not found.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>icu_multilib.default_icu_version</varname> (<type>string</type>)
     <indexterm>
      <primary><varname>icu_multilib.default_icu_version</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      Identifies the version of the ICU library to choose; or, if <varname>icu_multilib.search_by_collator_version</varname> is <literal>true</literal>, the ICU library to choose if no identical match to the collator version is found. The default is the empty string, meaning to use the built-in ICU library.
     </para>
     <para>
      Valid values are either of the form <literal>major.minor</literal> such
      as <literal>70.1</literal>; or a major version number alone, such as
      <literal>70</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>icu_multilib.include_builtin</varname> (<type>string</type>)
     <indexterm>
      <primary><varname>icu_multilib.include_builtin</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      Determines whether the built-in version of ICU is included when
      searching for a suitable ICU library. The default is
      <literal>true</literal>.
     </para>
     <para>
      Even if set to <literal>false</literal>, the built-in ICU library may be
      used if no other suitable ICU library is identified and
      <varname>icu_multilib.default_icu_version</varname> is set to the empty
      string.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <varname>icu_multilib.search_by_collator_version</varname> (<type>string</type>)
     <indexterm>
      <primary><varname>icu_multilib.search_by_collator_version</varname> configuration parameter</primary>
     </indexterm>
    </term>
    <listitem>
     <para>
      Causes <filename>icu_multilib</filename> to identify the ICU library
      with the highest major version that offers the required collator with an
      exactly-matching collator version. The default is <literal>false</literal>.
     </para>
     <para>
      When set to <literal>true</literal>, <filename>icu_multilib</filename>
      relies on equal collator versions to produce identical collation order.
     </para>
     <para>
      If no ICU library is found with an exactly-matching collator version,
      <filename>icu_multilib</filename> will fall back to the
      <varname>icu_multilib.default_icu_version</varname>; or if not set, to
      the built-in ICU library.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2>
  <title>Functions</title>

  <table id="icu-multilib-functions">
   <title><filename>icu_multilib</filename> Functions</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
       Function
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
       <function>icu_multilib.library_versions</function> ()
       <returnvalue>setof record</returnvalue>
       ( <parameter>icu_version</parameter> <type>text</type>,
       <parameter>unicode_version</parameter> <type>text</type>,
       <parameter>cldr_version</parameter> <type>text</type>,
       <parameter>libicui18n_name</parameter> <type>text</type>,
       <parameter>libicuuc_name</parameter> <type>text</type>)
      </para>
      <para>
       Returns details for each available ICU library found in
       <varname>icu_multilib.library_path</varname>. Also includes the
       built-in ICU library iv <varname>icu_multilib.include_builtin</varname>
       is <literal>true</literal>.
      </para></entry>
     </row>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
       <function>icu_multilib.library_collators</function> ( <parameter>major_version</parameter> <type>text</type> <literal>DEFAULT</literal> <literal>null</literal> )
       <returnvalue>setof record</returnvalue>
       ( <parameter>locale</parameter> <type>text</type>,
       <parameter>icu_version</parameter> <type>text</type>,
       <parameter>uca_version</parameter> <type>text</type>,
       <parameter>collator_version</parameter> <type>text</type> )
      </para>
      <para>
       Returns details for all available collators provided by the ICU library
       with the given <parameter>major_version</parameter>; or by the built-in
       ICU library if <parameter>major_version</parameter> is
       <literal>null</literal>.
      </para></entry>
     </row>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
       <function>icu_multilib.collator_version_search</function> ( <parameter>locale</parameter> <type>text</type>, <parameter>requested_version</parameter> <type>text</type> <literal>DEFAULT</literal> <literal>null</literal>, <parameter>log_ok</parameter> <type>boolean</type> <literal>DEFAULT</literal> <literal>false</literal> )
       <returnvalue>record</returnvalue>
       ( <parameter>icu_version</parameter> <type>text</type>,
       <parameter>uca_version</parameter> <type>text</type>,
       <parameter>collator_version</parameter> <type>text</type> )
      </para>
      <para>
       Performs a search for the appropriate ICU library given the locale name
       and requested collator version, and returns details about the ICU
       library.
      </para>
      <para>
       If <parameter>requested_version</parameter> is <literal>null</literal>,
       it will return the ICU library identified by
       <varname>icu_multilib.default_icu_version</varname> if set to
       <literal>true</literal>; otherwise the built-in ICU library.
      </para>
      <para>
       If <parameter>log_ok</parameter> is <literal>true</literal>, the search
       may emit log messages at the level
       <varname>icu_multilib.library_search_log_level</varname>, which may be
       useful for diagnosing misconfiguration.
      </para></entry>
     </row>
     <row>
      <entry role="func_table_entry"><para role="func_signature">
       <function>icu_multilib.collator_versions</function> ( <parameter>locale</parameter> <type>text</type> )
       <returnvalue>setof record</returnvalue>
       ( <parameter>icu_version</parameter> <type>text</type>,
       <parameter>uca_version</parameter> <type>text</type>,
       <parameter>collator_version</parameter> <type>text</type> )
      </para>
      <para>
       Returns details about available collators for the given
       <parameter>locale</parameter> from all available ICU libraries.
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2 id="icu-multilib-examples">
  <title>Examples</title>

<screen>
SELECT icu_version, unicode_version, cldr_version FROM icu_multilib.library_versions() LIMIT 3;
 icu_version | unicode_version | cldr_version
-------------+-----------------+--------------
 70.1        | 14.0            | 40.0
 69.1        | 13.0            | 39.0
 68.2        | 13.0            | 38.1
(3 rows)
</screen>

<screen>
SELECT * FROM icu_multilib.collator_versions('en_US') WHERE icu_version BETWEEN '60.0' and '65.0';
 icu_version | uca_version | collator_version
-------------+-------------+------------------
 64.2        | 12.1        | 153.97
 63.2        | 11.0        | 153.88
 62.2        | 11.0        | 153.88
 61.2        | 10.0        | 153.80
 60.3        | 10.0        | 153.80
(5 rows)
</screen>

<screen>
SELECT * FROM icu_multilib.collator_version_search('en_US', '153.97');
 icu_version | uca_version | collator_version
-------------+-------------+------------------
 65.1        | 12.1        | 153.97
(1 row)
</screen>

 </sect2>

 <sect2 id="icu-multilib-author">
  <title>Authors</title>

  <para>
   Jeff Davis <email>jdavis@postgresql.org</email>, Thomas Munro <email>tmunro@postgresql.org</email>
  </para>
 </sect2>

</sect1>
